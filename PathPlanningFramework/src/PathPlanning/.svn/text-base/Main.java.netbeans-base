
package PathPlanning;

import java.io.File;
import java.util.ArrayList;

/**
 * Main class. Read arguments and executes path planning algorithm.
 * @author Pablo Mu√±oz
 */
public class Main {

    /**
     * @param args the command line arguments.
     */
    public static void main(String[] args) {
     try{
//          AuxTests.dtm_reduce("C:\\Users\\pablich\\Desktop\\TESIS\\Codigo\\PathPlanning\\3drov.grd", "C:\\Users\\pablich\\Desktop\\TESIS\\Codigo\\PathPlanning\\3drovred.grd",0,0,1024,1024,3);
//          System.exit(0);
        java.text.DecimalFormat df = new java.text.DecimalFormat("0.000");
        float[][] z = new float[4][4]; // f(x,y)=z[x][y]
        int x1=1;
        int y1=1;
        int x2=-2;
        int y2=3;
        Surface s = new Surface(3,-2,7,-5,6,-4);
//        Surface s = new Surface(5,-3,1,-7,-2,12);
//       Surface s = new Surface(1,-1,2,-1,1,-4);
        double nv[] = s.get_normal_vector(x1, y1);
        
        System.out.println("Distance between ("+x1+","+y1+","+s.get_z(x1,y1)+"),("+x2+","+y2+","+s.get_z(x2,y2)+"): "+s.get_l(x1, y1, x2, y2));
        System.out.println("Normal vector at ("+x1+","+y1+","+s.get_z(x1,y1)+"): ["+nv[0]+","+nv[1]+","+nv[2]+"]");
        System.out.println("0x = "+s.get_theta_x(x1, y1)+"   0y = "+s.get_theta_y(x1, y1));
        System.out.println(s.toString());      
        //Surface.printMatrixPoints(z);
        System.exit(0);
        
         /******************************
         *  STANDALONE VISUALIZATOR
         ******************************/ 
         if(args.length == 4 && args[0].charAt(1) == 'v')
         {
            Map map = new Map(args[1], args[2], true);
            ArrayList<double[]> path = FileManager.ReadPathfile(args[3]);
            GUI.Panel guimap = new GUI.Panel(map, path, 1, "GSI at UAH");
            guimap.setVisible(true);
            try{
             System.in.read();
            }catch(Exception e){}
            System.exit(0);
         }
         
	/******************************
         *  TASK PLANNER CONNECTION
         ******************************/ 
	 if((args.length == 3 || args.length == 4) && args[0].charAt(0) == '.')
	 {
	     double timestart = System.currentTimeMillis();
	     TaskPlannerConnect pathsearch = new TaskPlannerConnect();
	     if(!pathsearch.initialize(args))
		 System.exit(-1);
	     float out = pathsearch.runSearch();
	     pathsearch.close();
	     if(out > 0)
	     {
		 //System.out.println("Accumulated cost: "+out);
		 System.out.println("#CPU-TIME: "+(System.currentTimeMillis()-timestart));
		 System.exit(0);
	     }
	     else
	     {
		 System.out.println("Search failed.");
		 System.exit(-1);
	     }
	 }
	 
	/******************************
         *  PDDL TASK GENERATOR
         ******************************/
	 if(args.length == 5 && args[0].charAt(0) != '-')
	 {
	     Map dem = new Map(args[0], args[1], true);
	     int inittasks = Integer.parseInt(args[2]);
	     for(int tasks = inittasks; tasks <= Integer.parseInt(args[3]); tasks+=inittasks)
		AuxTests.generatePDDLtasks(dem, tasks, args[4]);
	     System.exit(0);
	 }
	 
        /******************************
         *  LINE OF SIGHT COMPARATION
         ******************************/
        if(args.length > 0 && args[0].equals("-l"))
        {
           if(args.length < 6)
           {
               System.out.println("For line of sight tests use:");
               System.out.println(" -l #tests #maps #cols #rows %obs");
               System.exit(-1);
           }
           double dat[] = new double[2];
           double aux[] = new double[2];
           dat[0] = 0; dat[1] = 0;
           int numaps = Integer.valueOf(args[2]);
           String zfile = String.valueOf(dat.hashCode()*1000);
           FileManager.GenerateZfile(zfile, Integer.valueOf(args[3]), Integer.valueOf(args[4]), 1);
           String cfile = String.valueOf(aux.hashCode()*1000);
           for(int i = 0; i< numaps; i++)
           {
                System.out.println("Map " + (i+1) + " of " + numaps);
                FileManager.GenerateCfile(cfile, Integer.valueOf(args[3])-1, Integer.valueOf(args[4])-1, Integer.valueOf(args[5]));
                aux = AuxTests.LineOfSightTest(Integer.valueOf(args[1]), zfile, cfile, true);
                dat[0] += aux[0];
                dat[1] += aux[1];
           }
           dat[0] = dat[0] / numaps;
           dat[1] = dat[1] / numaps;
           System.out.println("Line of Sight AVG(nsec) over "+numaps+" "+args[3]+"x"+args[4]+" "+args[5]+"% obs maps with "+args[1]+" tries");
           System.out.println("Bresenham --> " + dat[0]);
           System.out.println("B&P --------> " + dat[1]);
           System.out.println(" b&p/B = " + (dat[1]/dat[0]));
           File descz = new File(zfile);
           descz.deleteOnExit();
           File descc = new File(cfile);
           descc.deleteOnExit();
           System.exit(0);
        }
	 
        /***********************
         *  UPDATING PATH FILE
         ***********************/
        if(args.length > 1 && args[0].equals("-u"))
        {
            System.out.println("Updating path file " + args[1]);
            UpdaterPathFile upf = new UpdaterPathFile(args[1]);
            System.exit(0);
        }
        
	if(args.length < 5)
	{
            System.out.print("Usage:");
            System.out.println("\n>For file generation:");
            System.out.println("  -g{z,c,r} n-cols n-rows value outfile\n");
            System.out.println("     z for DEM generation with 'value' as number of iteration for hill algorithm.");
            System.out.println("     c for cost file, 'value' is the percentage of obstacles ");
            System.out.println("       (less 40% to guarantee convergence of the algorithm.");
            System.out.println("     r for generate indoor map using square patterns r0-r5, 'value' is the size of");
            System.out.println("       the side for the patterns.");
            System.out.println("\n>To search a path:");
            System.out.println("  z-file c-file Xi Yi Xg Yg -alg [n] [-z[q]] [-c] pathfile [-w[s]]\n");
            System.out.println("     -z specifies to use altitude in search. Uses lineal interpolation for");
            System.out.println("        any-angle algorithms. Using -zq changes to quadratic interpolation.");
            System.out.println("     -c specifies to use transversal costs in search.");
            System.out.println("     n multiplicative factor for alpha weight (olny b/v algorithms, def=1).");
            System.out.println("     -alg can be: -a -> A*, -p -> A*PS, -d -> Dijkstra, -t -> Basic Theta*");
            System.out.println("                  -s -> S-Theta*, -b -> A*PS ALPHAp, -v -> Basic Theta* ALPHAp");
            System.out.println("                  for G-Theta* use -t and specify -z and -zq for quadratic G-Theta*");
            System.out.println("     -w[s] show a window with map and path representation, s for scale zoom [3,100].");
          //System.out.println("   pp z-file [definition-files] [robot-definition-file] subgoals* [heuristic-function]");
            System.exit(-1);
	}
	// Main data
	int nextarg = -1;
        Map map;
        
        /******************************
         *  GENERATE Z_FILE OR C_FILE
         ******************************/
        String aux = args[++nextarg];
        if(aux.equals("-gz") || aux.equals("-gc") || aux.equals("-gr"))
	{
            int cols, rows;
            cols = Integer.valueOf(args[++nextarg]);
            rows = Integer.valueOf(args[++nextarg]);
            int maxz = Integer.valueOf(args[++nextarg]);
            if(cols < 1 || rows < 1 || maxz < 0) // Check files/rows value
            {
                System.out.println("Invalid col/row/z/c value (must be > 0, z/c >=0) [" + cols + "," + rows + "](" + maxz + ")");
                System.exit(-1);
            }
            switch(aux.charAt(2))
            {
                case 'z':
                    FileManager.GenerateZfile(args[++nextarg], cols, rows, maxz);
                    break;
                case 'c':
                    FileManager.GenerateCfile(args[++nextarg], cols, rows, maxz);
                    break;
                case 'r':
                    FileManager.GenerateRfile(args[++nextarg], cols, rows, maxz);
                    break;
                default:
                    System.out.println("Invalid generation method.");
                    System.exit(-1);
            }
            System.exit(0);
        }
        
        /****************
         *  SEARCH PATH
         ****************/
        if(args.length < 7)
        {
            System.out.println("Too few parameters to search a path.");
            System.exit(-1);
        }
        // Open the Z-file or create a 10 random altitude DEM parsing the arguments
        try{
            // Less than 3 arguments valid with z-file
            if(args.length < 3)
                throw new java.lang.NumberFormatException();
            map = new Map(Integer.parseInt(args[nextarg]), Integer.parseInt(args[++nextarg]), 10, 10, false, true);
        }catch(NumberFormatException notNumber){
            // DEM file specified
            String cfile = "";
            if(args.length >= 8) // 8 args or more implies cost file
            {
                cfile = args[1];
                nextarg++;
            }
            map = new Map(args[0], cfile, true);
        }
        // Check if DEM file is valid
        if(!map.valid_dem())
        {
            System.out.println("DEM is invalid.");
            System.exit(-1);
        }
        // Get initial and goal points
        int xs = 0, ys = 0, xg = 0, yg = 0;
        try{
            xs = Integer.valueOf(args[++nextarg]);
            ys = Integer.valueOf(args[++nextarg]);
            xg = Integer.valueOf(args[++nextarg]);
            yg = Integer.valueOf(args[++nextarg]);
        }catch(Exception e)
        {
            System.out.println("Check arguments for initial and goal position. " + e.toString());
            System.exit(-1);
        }
        if(!map.valid_pos(xs, ys) || !map.valid_pos(xg, yg))
        {
            System.out.println("Invalid initial or goal point; X and Y must be greater or equal to 0 and less than cols or rows.");
            System.exit(-1);
        }
        // Read search algorithm
        if(args[nextarg+1].length() < 2)
        {
            System.out.println("Invalid search algorithm.");
            System.exit(-1);
        }
        char alg = args[++nextarg].charAt(1);
        // Check if want to use the Z and/or C values
        boolean withz = false;
        boolean withc = false;
	float delta = Float.NaN;
        short heur = Heuristics.H_EUCLIDEAN;
        try{
	 try{
          delta = Float.parseFloat(args[nextarg+1]);
         }catch(NumberFormatException nfe){}
	 if(!Float.isNaN(delta))
         {
	     SearchMethod.changeCfactor(delta);
             nextarg++;
         }
         if(args[nextarg+1].equals("-c") || args[nextarg+2].equals("-c"))
             withc = true;
         if(args[nextarg+1].startsWith("-z") || args[nextarg+2].startsWith("-z"))
         {
             withz = true;
             heur = Heuristics.H_EUCLIDEAN_Z;
             if(args[nextarg+1].endsWith("q") || args[nextarg+2].endsWith("q"))
                 map.change_interpolation(); // Use quadratic interpolation
         }
        }catch(ArrayIndexOutOfBoundsException a){}
        if(withz) nextarg++;
        if(withc) nextarg++;
        // Check if want gui visualization
        boolean gui = false;
        int scale = 0;
        if(args[args.length-1].startsWith("-w"))
             gui = true;
        if(gui && args[args.length-1].length()>2)
            scale = Integer.valueOf(args[args.length-1].substring(2));        
        
        // <<<<< BEGIN SEARCH >>>>>
        SearchMethod algorithm;
        switch(alg)
        {
            case 'a': // Base A* with octile distance as heuristic function
                algorithm = new Astar(map, map.get_node(xs, ys), map.get_node(xg, yg), Heuristics.H_OCTILE, withz, withc);
                break;
            case 'r': // Base A* with vertex re-expansion
                algorithm = new Astar(map, map.get_node(xs, ys), map.get_node(xg, yg), Heuristics.H_OCTILE, withz, withc);
                break;
            case 'p': // A* Post Processed
                algorithm = new Astar(map, map.get_node(xs, ys), map.get_node(xg, yg), heur, withz, withc);
                break;
            case 'd': // Dijkstra algorithm
                algorithm = new Dijkstra(map, map.get_node(xs, ys), map.get_node(xg, yg), heur, withz, withc);
                break;
            case 't': // Basic Theta* and G-Theta* when altitude is used in search process
                if(!withz)
                    algorithm = new Thetastar(map, map.get_node(xs, ys), map.get_node(xg, yg), heur, withz, withc);
                else
                    algorithm = new GTheta(map, map.get_node(xs, ys), map.get_node(xg, yg), heur, withz, withc);
                break;
            case 's': // S-Theta* for low steering
                algorithm = new Thetastar(map, map.get_node(xs, ys), map.get_node(xg, yg), Heuristics.H_ALPHA2, withz, withc);
                algorithm.change_name("S-Theta*");
                break;
            case 'b': // A*PS with greedy heuristic
                algorithm = new Astar(map, map.get_node(xs, ys), map.get_node(xg, yg), Heuristics.H_ALPHA, withz, withc);
                break;
            case 'v': // Basic Theta* with greedy heuristic
                algorithm = new Thetastar(map, map.get_node(xs, ys), map.get_node(xg, yg), Heuristics.H_ALPHA, withz, withc);
                algorithm.change_name("Basic Theta* H-alpha");
                break;
	    default:
                algorithm = new Astar();
                System.out.println("Invalid search algorithm: " + alg);
                System.exit(-1);
        }
        // Perform search and print relevant information
        if(alg != 'r')
            algorithm.search();
        else
        {
            ((Astar)algorithm).search_rex();
            algorithm.change_name("A* with re-expansion");
        }
        if(alg == 'p' || alg == 'b') // Post process phase when required
            ((Astar)algorithm).search_ps();
	if(alg == 'b')
	    algorithm.change_name("A*PS H-alpha");
        ArrayList path = algorithm.get_path();
        aux = algorithm.path_info();
        System.out.println("-------------------------------------------------");
        System.out.println(algorithm.toString());
        System.out.println(aux);
        
        // Output file with path
        if(path != null) // If there is a path, write the output file
            FileManager.WritePathFile(args[++nextarg], path, aux);
	else
	    System.exit(-1);
        
        System.out.println("Output file with found path is " + args[nextarg]);
        System.out.println("-------------------------------------------------");

        
        if(withz && !map.get_isLinealInterpolation())
        {
            double ax,ay,minx,miny,maxx,maxy;
            minx = Double.MAX_VALUE;
            miny = Double.MAX_VALUE;
            maxx = Double.MIN_VALUE;
            maxy = Double.MIN_VALUE;
            Surface fxy;
            double x, y;
            ArrayList<double[]> points = new ArrayList();
            points = algorithm.get_path_any_angle();
            for(int i=0; i<points.size(); i++)
            {
                x = points.get(i)[0];
                y = points.get(i)[1];
                fxy = map.fi[(int)x/map.R][(int)y/map.R];
                ax = 90-Math.abs(fxy.get_theta_x(x, y));
                ay = 90-Math.abs(fxy.get_theta_y(x, y));
                if(ax > maxx) maxx = ax;
                if(ax < minx) minx = ax;
                if(ay > maxy) maxy = ay;
                if(ay < miny) miny = ay;
                System.out.println("0x = "+ax+"   0y = "+ay+"   ("+x+","+y+","+points.get(i)[2]+")");
            }
            System.out.println("MAX> 0x = "+maxx+"   0y = "+maxy);
            System.out.println("MIN> 0x = "+minx+"   0y = "+miny);
        }
        
        // Check GUI visualization
        if(gui)
        {
            GUI.Panel guimap = new GUI.Panel(map, path, scale, algorithm.toString()+"\n"+algorithm.path_info());
            guimap.setVisible(true);
        }

     if(!gui)
        System.exit(0);
     //----------------------------------/
     }catch(ArrayIndexOutOfBoundsException a){
        System.out.println("Invalid argument index "+a.toString());
        System.exit(-1); 
     }
     catch(Exception e){
        System.out.println(e.toString());
        System.exit(-1);
     }
    }
}
