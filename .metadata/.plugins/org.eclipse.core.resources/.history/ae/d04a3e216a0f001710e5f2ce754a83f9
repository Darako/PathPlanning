package PathPlanning;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class AStar extends SearchMethod {

    private List<Node> open;
	
	public AStar(Map dem, Node init, Node end, short heuristic, boolean withZ, boolean withC) {
		super("AStar", dem, init, end, heuristic, withZ, withC, false);		
		open = new ArrayList<>();
		init.setParent(null);
		init.setG(0);
		init.setH(get_h(init, init, end));
		init.setF(init.getG()+init.getH());
		open = map.get_succesors_without_obstacles(init);		
	}
	

	@Override
	protected void clear_internal_data() {
		open.clear(); // References in open list lost in DEM clean (new nodes)
		for(int j = 0; j < map.get_nrows(); j++) {
	        for(int i = 0; i < map.get_ncols(); i++) {
	            map.get_node(i, j).setG(Float.MAX_VALUE);
	            map.get_node(i, j).setParent(null);
	            open.add(map.get_node(i, j));
	        }
	    }		
	}

	@Override
	public boolean search() {	
		if(!check_valid_data())
			return false;
		    
		Node nodoActual = start;
		int x=0, y=0;
		float g;
		float h;
		ArrayList<Node> succ = new ArrayList();	  
		ArrayList<Node> path = new ArrayList();	  
		
		start_cpu_counter();
		while(!nodoActual.equals(goal)) {	
			Collections.sort(open);
			nodoActual = open.remove(0);
			succ = map.get_succesors_without_obstacles(nodoActual);
			for(int i = 0; i < succ.size(); i++){
				succ.get(i).setParent(nodoActual);
				g = get_g(nodoActual, succ.get(i), false);
				h = get_h(nodoActual, succ.get(i), goal);
				succ.get(i).setF(g,h);	        		
			}
			open.addAll(succ);	        	
		}
		path = get_path(nodoActual);        
		return true;
	}
	
	public ArrayList get_path(Node dest) {
		ArrayList<Node> camino = new ArrayList<Node>();
		Node nodoActual = dest;
		while(!nodoActual.getParent().equals(null)){
			camino.add(nodoActual);
			nodoActual = nodoActual.getParent();
		}
		return camino;
    }
}
