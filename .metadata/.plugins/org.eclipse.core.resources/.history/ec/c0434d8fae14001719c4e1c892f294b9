package PathPlanning;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class AStar extends SearchMethod {

    private List<Node> open;
    private List<Node> closed;
	
	public AStar(Map dem, Node init, Node end, short heuristic, boolean withZ, boolean withC) {
		super("AStar", dem, init, end, heuristic, withZ, withC, false);		
		open = new ArrayList<>();		
		for(int j = 0; j < map.get_nrows(); j++) {
	        for(int i = 0; i < map.get_ncols(); i++) {
	            map.get_node(i, j).setParent(null);
	        }
	    }		
		init.setG(0);
		init.setH(get_h(init, init, end));
		init.setF(init.getG()+init.getH());
		init.setParent(init);
		open.clear();
		open.add(init);
	}
	

	@Override
	protected void clear_internal_data() {
		open.clear(); // References in open list lost in DEM clean (new nodes)
		for(int j = 0; j < map.get_nrows(); j++) {
	        for(int i = 0; i < map.get_ncols(); i++) {
	            map.get_node(i, j).setParent(null);
	        }
	    }		
	}

	@Override
	public boolean search() {	
		if(!check_valid_data())
			return false;		    
		Node nodoActual = start;
		float g;
		float h;
		ArrayList<Node> sucesores = new ArrayList<Node>();	  
		ArrayList<Node> path = new ArrayList<Node>();
		
		nodoActual = open.remove(0);
		start_cpu_counter();
		////
		while(!open.isEmpty()){
			nodoActual = open.remove(0);
			if(nodoActual.equals(goal)){
				path = get_path(nodoActual); 
				print_open(path);
				return true;
			}
			closed.add(nodoActual);
			sucesores = map.get_succesors(nodoActual);
			
		}
		
		
		////
        end_cpu_counter();
		path = get_path(nodoActual); 
		print_open(path);
		return true;
	}
	
	public ArrayList<Node> get_path(Node dest) {
		ArrayList<Node> camino = new ArrayList<Node>();
		Node nodoActual = dest;
		while(nodoActual.getParent() != null){
			camino.add(nodoActual);
			nodoActual = nodoActual.getParent();
		}
		camino.add(nodoActual);
		return camino;
    }
	
    /**
     * Print the open list.
     */
    private void print_open(ArrayList<Node> path)
    {   
        System.out.println("Camino :");
        for(int i=0; i < path.size(); i++)
            System.out.println("    " + path.get(i).toString());
        java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(System.in));
        try{ 
            br.readLine();
        }catch(Exception ioe){}
        System.out.println();
    }	
}
