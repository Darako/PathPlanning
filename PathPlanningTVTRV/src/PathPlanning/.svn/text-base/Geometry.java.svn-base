
package PathPlanning;

/**
 * Geometry related functions.
 * @author Pablo muñoz
 */
public abstract class Geometry {
     
    /** Conversion between radians and degrees. */
    public final static float CONV = (float)(180/Math.PI);

    /**
     * Calculate the hypotenuse of a triangle using the other two sides.
     * @param dx side 1.
     * @param dy side 2.
     * @return The hypotenuse of the triangle.
     */
    public static float LongHyp(float dx, float dy)
    {
        return (float)Math.sqrt(dx*dx + dy*dy);
    }
    
    /**
     * Calculate the hypotenuse of a triangle using the other two sides and a third dimension.
     * @param dx side 1.
     * @param dy side 2.
     * @param dz third dimension.
     * @return The hypotenuse of the triangle.
     */
    public static float LongHypZ(float dx, float dy, float dz)
    {
	return (float)Math.sqrt(dx*dx + dy*dy + dz*dz);
    }

    /**
     * Calculate the hypotenuse of a triangle using the cosine theroem.
     * @param dx one side of the triangle.
     * @param dy another side.
     * @param ang opposite angle of the hypotenuse (in degrees).
     * @return The longitude of the hypotenuse.
     */
    public static float LongHypA(float dx, float dy, float ang)
    {
        return (float)Math.sqrt(dx*dx + dy*dy - 2*dx*dy*Math.cos(ang/CONV));
    }

    /**
     * Calculate one angle of a triangle using the cosine theorem. <b>Both dx and dy
     * must be greater than 0.</b>
     * @param dx one side.
     * @param dy another side.
     * @param de hypotenuse of the triangle. Opposite angle is returned.
     * @return The opposite angle (in degrees) of the <b>hypotenuse</b>.
     */
    public static float AngleHyp(float dx, float dy, float de)
    {
        return (float)(Math.acos((dx*dx + dy*dy - de*de) / (2*dx*dy)) * CONV);
    }

    /**
     * Calculates the angle for a x,y node pointing from the 0,0 (origin of axis).
     * @param x x position.
     * @param y y posiiton.
     * @return The angle in degrees from 0,0 to (x,y) point.
     */
    public static float Angle(float x, float y)
    {
        return (float)(Math.atan2(x, y) * CONV); 
    }
      
    /**
     * Calculate one angle of a triangle using the cosine theorem. <i>dx or dy can be 0.
     * Both can be positive or negative in order to obtain the correct angle.</i>
     * <pre>
     *	     Q3 | Q4		dx
     *	      --+--> 'X'	---
     *	     Q2 | Q1		\ | dy
     *		v 'Y'	      de \|
     * </pre>
     * @param dx one side.
     * @param dy another side. Opposite angle is returned.
     * @param de hypotenuse of the triangle.
     * @return The opposite angle (in degrees) of the <b>dy</b> segment. 
     */
    public static float Angle(float dx, float dy, float de)
    {
        if(dx != 0) // Avoid NaN
            return OffsetAngle((float)Math.acos((dx*dx + de*de - dy*dy) / Math.abs(2*dx*de)) * CONV, dx, dy);
        else
            if(dy != 0)
            {
                if(dy > 0)
                    return 90;
                else
                    return 270;
            }
            else // dx==0  && dy==0
		return 0;
    }
    
    /**
     * Set the correct angle value in [0º,360º).
     * @param angle angle to correct.
     * @param quadrant quadrant in which angle is.
     * @return The corrected angle value between [0º,360º).
     */
    public static float OffsetAngle(float angle, int quadrant)
    {
        if(quadrant == 1) return angle;
        if(quadrant == 2) return 180 - angle;
        if(quadrant == 3) return 180 + angle;
        if(quadrant == 4) return 360 - angle;
        return 0;
    }
    
    /**
     * Set the correct angle value in [0º,360º).
     * @param angle angle to correct.
     * @param x x coord of the triangle vertice. 
     * @param y y coord of the triangle vertice.
     * @return The corrected angle value between [0º,360º).
     */
    public static float OffsetAngle(float angle, float x, float y)
    {
        if(x >= 0 && y >= 0) return angle;
        if(x < 0  && y >= 0) return 180 - angle;
        if(x < 0  && y < 0 ) return 180 + angle;
        if(x >= 0 && y < 0 ) return 360 - angle;
        return 0;
    }
    
    /**
     * Allows to know the quadrant that owns the given node.
     * @param x x coordinate of the point.
     * @param y y coordinate of the point.
     * @return The quadrant number (from 1 to 4) in which the x,y point is located.
     */
    public static int Quadrant(float x, float y)
    {
        if(x >= 0 && y >= 0) return 1;
        if(x < 0  && y >= 0) return 2;
        if(x < 0  && y < 0 ) return 3;
        if(x >= 0 && y < 0 ) return 4;
        return 0;
    }

    /**
     * Calculates the altitude of an intermediate point between two altitudes using a 
     * linear surface model. The axis projected distance between point 1 and 2 must be 1.
     * @param z1 altitude of point 1.
     * @param z2 altitude of point 2.
     * @param cpi coordinate for the intermediate point (x or y).
     * @param cpm coordinate for the point 1 (x or y, equal to cpi).
     * @return The z value corresponding to cpi coordinate.
     */
    public static float ZInterLin(float z1, float z2, float cpi, float cpm)
    {
	return (z2 - z1) * (cpi - cpm) + z1;
    }
    
    /**
     * This function calculate the real cost of a line that can cross a whole region 
     * of the map using the cost and altitude values if desired. Both values are taking 
     * into consideration the length of the segment that crosses each region (@see axis_points).
     * @param map dem and cost information. Also checks line of sight.
     * @param pos actual position.
     * @param succ next position.
     * @param withz true to use the altitude node value in length calculus.
     * @param whitc true to use the transversal cost multiplier.
     * @return The cost to transverse between node pos and succ. -1 if there is an obstacle between nodes.
     */
    public static float SegmentLength(Map map, Node pos, Node succ, boolean withz, boolean whitc)
    {
        float dx, dy;
        float ltot = 0;
        float cost = 1;
        float points[][] = Geometry.AxisPoints(map, pos.getX(), pos.getY(), succ.getX(), succ.getY(), withz);
        for(int i=0; i<points.length-1; i++)
        {
            dx = points[i][0] - points[i+1][0];
            dy = points[i][1] - points[i+1][1];
            if(dx == 0 && dy == 0) continue; // Same points
            if(!map.get_isDmode())
                cost = map.get_tcost((int)(points[i][0]+0.5), (int)(points[i][1]+0.5));
            else // corner-node mode // Min cost to transverse between vertexs. The second condition is for guarantee to cross from a point to a vertex or viceversa.
             // In some cases (e.g. FD*) you can cross a square starting at middle point for example. This correspond to else case.
             if((dx == 0 || dy == 0) && ((points[i][0]%1 == 0 && points[i][1]%1 == 0) || (points[i+1][0]%1 == 0 && points[i+1][1]%1 == 0)))
                cost = map.get_tcost((int)points[i][0], (int)points[i][1], (int)points[i+1][0], (int)points[i+1][1]);
             else // Upper-left diagonal transversal cost, segment length in (1,sqrt(2)]
                cost = map.get_tcost(Math.min((int)points[i][0], (int)points[i+1][0]), Math.min((int)points[i][1], (int)points[i+1][1]));
            if(cost > Map.MAX_COST) // Check obstacles
		return -1;
            
	    if(!withz)
                ltot += (Geometry.LongHyp(dx, dy) * (whitc? cost : 1));
            else
                if(map.get_isLinealInterpolation())
                    ltot += (Geometry.LongHypZ(dx, dy, (points[i][2]-points[i+1][2])) * (whitc? cost : 1));
                else
                    ltot += ((float)map.fi[(int)points[i][0]/map.R][(int)points[i][1]/map.R].get_l(points[i][0]%map.R, points[i][1]%map.R, points[i+1][0]%map.R, points[i+1][1]%map.R) * (whitc? cost : 1));
        }
        return ltot;
    }
      
    /**
     * Function to obtain a list of points (x,y,z) that cross the X and Y axis for
     * a desired line that is defined by its start and end point. The list are a
     * sorted array of points from the start point to end point. The z value is 
     * calculated as a linear surface from neighbours points. It can contains
     * duplicated points (only intermediate vertex). It must starts at a valid node
     * and end at another valid node.
     * @param xs start x position for the line.
     * @param ys start y position for the line.
     * @param xg end x position.
     * @param yg end y position.
     * @param withz true to calculate the alitude of the point (interpolation method defined in Map).
     * @return A sorted array with a minimum size of 2 (start and end points) with
     * the list of points. The elements are represented by x=[i][0], y=[i][1], z=[i][2].
     */    
    public static float[][] AxisPoints(Map map, int xs, int ys, int xg, int yg, boolean withz)
    {
        int pos = (Math.abs(xs - xg)>0?Math.abs(xs - xg):1)+(Math.abs(ys - yg)>0?Math.abs(ys - yg):1);
	float points[][] = new float[pos][3];
        
        float stepx = (xg >= xs)? 1 : -1;
        float stepy = (yg >= ys)? 1 : -1;
        float p = (float)(yg - ys) / (xg - xs);
        if(p == 0) // Horizontal move
        {
            for(int i = 0; i <= Math.abs(xg-xs); i++)
            {
                points[i][0] = xs + i * stepx;
                points[i][1] = ys;
                points[i][2] = map.get_node((int)points[i][0], ys).getZ();
            }
            return points;     
        }
        if(Double.isInfinite(p)) // Vertical move
        {
            for(int i = 0; i <= Math.abs(yg-ys); i++)
            {
                points[i][0] = xs;
                points[i][1] = ys + i * stepy;
                points[i][2] = map.get_node(xs, (int)points[i][1]).getZ();
            }
            return points;
        }

        // Change step for center-node mode
        if(!map.get_isDmode())
        {
            stepx /= 2;
            stepy /= 2;
        }
        // Diagonal move
        float Xx = xs + stepx;  // X axis x cord
        float Yy = ys + stepy;  // Y axis y cord
        float Yx = xs + (Yy - ys)/p; // X axis y cord
        float Xy = ys + (Xx - xs)*p; // Y axis x cord

        points[0][0] = xs;
        points[0][1] = ys;
        points[0][2] = map.get_node(xs, ys).getZ();
        pos = 1;
        while(pos < points.length-1)
            if((Xx <= Yx && stepx > 0) || (Xx >= Yx && stepx < 0))
            {
                points[pos][0] = Xx;
                points[pos][1] = Xy;
                if(Xy%1 == 0 || !withz)
                    points[pos][2] = map.get_node((int)Xx, (int)Xy).getZ();
                else
                    // Use specified interpolation method
                    if(map.get_isLinealInterpolation())
                        points[pos][2] = Geometry.ZInterLin(map.get_node((int)Xx, (int)Xy).getZ(), map.get_node((int)Xx, (int)Xy+1).getZ(), Xy, (int)Xy);
//                    else // quadratic
//                    {
//                        // f(x,y)=z[x][y]
//                        float[][] z = SurfacePoints(map, Xx, Xy, true);
//                        Surface s = new Surface(z);
//                        points[pos][2] = (float)s.get_z(2,2+Xy-(int)Xy);
//                    //    System.out.println(s.toString());
//                    //    System.out.println("f(2,"+(2+Xy-(int)Xy)+") = "+points[pos][2]+" Real point: ("+Xx+","+Xy+")");
//                    }
                pos++;
                if(Xx == Yx)
                {
                    Yy += stepy;
                    Yx = xs + (Yy - ys)/p;
                    // Clone vertice to avoid empty elements in array
                    points[pos][0] = Xx;
                    points[pos][1] = Xy;
                    points[pos][2] = points[pos-1][2];
                    pos++;    
                }
                Xx += stepx;
                Xy = ys + (Xx - xs)*p;
            }
            else
            {
                points[pos][0] = Yx;
                points[pos][1] = Yy;
                if(Yx%1 == 0 || !withz)
                    points[pos][2] = map.get_node((int)Yx, (int)Yy).getZ();
                else
                    // Use specified interpolation method
                    if(map.get_isLinealInterpolation())
                        points[pos][2] = Geometry.ZInterLin(map.get_node((int)Yx, (int)Yy).getZ(), map.get_node((int)Yx+1, (int)Yy).getZ(), Yx, (int)Yx);
//                    else // quadratic
//                    {
//                        float[][] z = SurfacePoints(map, Yx, Yy, false);
//                        Surface s = new Surface(z);
//                        points[pos][2] = (float)s.get_z(2+Yx-(int)Yx, 2);
//                    //    System.out.println(s.toString());
//                    //    System.out.println("f("+(2+Yx-(int)Yx)+",2) = "+points[pos][2]+" Real point: ("+Yx+","+Yy+")");
//                    }
                pos++;
		Yy += stepy;
                Yx = xs + (Yy - ys)/p;
            }
        // Goal point not included in while
        points[pos][0] = xg;
        points[pos][1] = yg;
        points[pos][2] = map.get_node(xg, yg).getZ();
        return points;
    }
    
    
    private static float[][] SurfacePoints(Map map, float x, float y, boolean xaxis)
    {
        // Number of X points (quadratic interpolation)
        short N = 3;
        // Number of Y points
        short M = 3;
        float[][] z = new float[N][M]; // Matlab format
        if(x<0 || y<0 || x>map.get_ncols() || y>map.get_nrows()) return z;

        // Corners check
        if(x <= 1 && y <= 1) // Upper left
        {
           for(int i=0; i<N; i++)
               for(int j=0; j<M; j++)
                   z[i][j] = map.get_node(i, j).getZ();
        }
        else
        if(x >=map.get_ncols()-2 && y <= 1) // Upper right
        {
           for(int i=map.get_ncols()-N; i<map.get_ncols(); i++)
               for(int j=0; j<M; j++)
                   z[i-map.get_ncols()+N][j] = map.get_node(i, j).getZ(); 
        }
        else
        if(x <= 1 && y >= map.get_nrows()-2) // Bottom left
        {
           for(int i=0; i<N; i++)
               for(int j=map.get_nrows()-M; j<map.get_nrows(); j++)
                   z[i][j-map.get_nrows()+M] = map.get_node(i, j).getZ(); 
        }
        else
        if(x >= map.get_ncols()-2 && y >= map.get_nrows()-2) // Bottom right
        {
           for(int i=map.get_ncols()-N; i<map.get_ncols(); i++)
               for(int j=map.get_nrows()-M; j<map.get_nrows(); j++)
                   z[i-map.get_ncols()+N][j-map.get_nrows()+M] = map.get_node(i, j).getZ(); 
        }
        else
        {
            int nx = (int)x;
            if(nx < 1) // Check if first or last column
                nx++;
            else if(nx > map.get_ncols()-2 || (!xaxis && nx >= map.get_ncols()-2))
                nx--;
            int ny = (int)y;
            if(ny < 1) // Check if first or last row
                ny++;
            else if(ny > map.get_nrows()-2 || (xaxis && ny >= map.get_nrows()-2))
                ny--;
            if(xaxis) // Point cut in X
                M++;
            else // Point cut in Y
                N++;
            z = new float[N][M];
            for(int i=nx-1; i<nx+(N-1); i++)
                for(int j=ny-1; j<ny+(M-1); j++)
                    z[i-nx+1][j-ny+1] = map.get_node(i, j).getZ();
        }
        // Surface.printMatrixPoints(z);
        return z;
    }
    
    // BASIC LINE OF SIGHT FUNCTIONS *******************************************
    
    /**
     * Use line equation for corner-node.
     * @param map
     * @param pos
     * @param succ
     * @return 
     */
    public static boolean LineOfSight(Map map, Node pos, Node succ)
    {
        int xs = pos.getX();
        int ys = pos.getY();        
        int xg = succ.getX();
        int yg = succ.getY();
        int stepx = (xg >= xs)? 1 : -1;
        int stepy = (yg >= ys)? 1 : -1;
        float p = (float)(yg - ys) / (xg - xs);
        
        if(p == 0) // Horizontal move
        {
            int xa;
            while(xs != xg)
            {
                xa = xs;
                xs += stepx;
                if(map.get_tcost(xa, ys, xs, ys) > Map.MAX_COST)
                    return false;
            }
            return true;
        }
        if(Double.isInfinite(p)) // Vertical move
        {
            int ya;
            while(ys != yg)
            {
                ya = ys;
                ys += stepy;
                if(map.get_tcost(xs, ya, xs, ys) > Map.MAX_COST)
                    return false;
            }
            return true;
        }
        // Diagonal move
	float xa = xs;
        float ya = ys;
        int Xx = xs + stepx;  // X axis x cord
        int Yy = ys + stepy;  // Y axis y cord
        float Yx = xs + (Yy - ys)/p; // Y axis x cord
        float Xy = ys + (Xx - xs)*p; // X axis y cord
	while(Xx != xg || Yy != yg)
            if((Xx <= Yx && stepx > 0) || (Xx >= Yx && stepx < 0))
            {
                if(map.get_tcost(Math.min((int)xa, Xx), Math.min((int)ya, (int)Xy)) > Map.MAX_COST)
                    return false;
		if(Xx == Yx)
                {
                    Yy += stepy;
		    Yx = xs + (Yy - ys)/p;
                }
                xa = Xx;
                ya = Xy;
		Xx += stepx;
                Xy = ys + (Xx - xs)*p;
            }
            else
            {
		if(map.get_tcost(Math.min((int)xa, (int)Yx), Math.min((int)ya, Yy)) > Map.MAX_COST)
                    return false;
		xa = Yx;
                ya = Yy;
		Yy += stepy;
                Yx = xs + (Yy - ys)/p;
            }
        // Goal point not included in while
        if(map.get_tcost(Math.min((int)xa, xg), Math.min((int)ya, yg)) > Map.MAX_COST)
            return false;
        return true;
    }
    
    /**
     * Test if is line of sight from node pos to node succ (that is, no obstacles between them) for corner-node.
     * This is the standard Bresenham line-drawing algorithm from computer graphics (Bresenham, 1965).
     * @param map dem information.
     * @param pos actual position.
     * @param succ desired node to check line of sight.
     * @return true if there is line of sight from pos to succ. False otherwise.
     */
    public static boolean LineOfSightB(Map map, Node pos, Node succ)
    {
        int x0 = pos.getX();
        int y0 = pos.getY();
        int x1 = succ.getX();
        int y1 = succ.getY();
        int dy = y1 - y0;
        int dx = x1 - x0;
        int f = 0;
        int sx, sy;
        if(dy < 0)
        {
            dy = -dy;
            sy = -1;
        }
        else
            sy = 1;
        if(dx < 0)
        {
            dx = -dx;
            sx = -1;
        }
        else
            sx = 1;
        if(dx >= dy)
            while(x0 != x1)
            {
                f += dy;
                if(f >= dx)
                {
                    if(map.get_tcost(x0+((sx-1)/2), y0+((sy-1)/2)) > Map.MAX_COST)
                        return false;
                    y0 += sy;
                    f -= dx;
                }
                if(f != 0 && (map.get_tcost(x0+((sx-1)/2), y0+((sy-1)/2)) > Map.MAX_COST))
                    return false;
                if(dy == 0 && (map.get_tcost(x0+((sx-1)/2), y0) > Map.MAX_COST) && (map.get_tcost(x0+((sx-1)/2), y0-1) > Map.MAX_COST))
                    return false;
                x0 += sx;
            }
        else
            while(y0 != y1)
            {
                f += dx;
                if(f >= dy)
                {
                    if(map.get_tcost(x0+((sx-1)/2), y0+((sy-1)/2)) > Map.MAX_COST)
                        return false;
                    x0 += sx;
                    f -= dy;
                }
                if(f != 0 && (map.get_tcost(x0+((sx-1)/2), y0+((sy-1)/2)) > Map.MAX_COST))
                    return false;
                if(dx == 0 && (map.get_tcost(x0, y0+((sy-1)/2)) > Map.MAX_COST) && (map.get_tcost(x0-1, y0+((sy-1)/2)) > Map.MAX_COST))
                    return false;
                y0 += sy;
            }
        return true;
    }
    
    
    /**
     * Test if is line of sight from node pos to node succ (that is, no obstacles between them) for center-node.
     * This is a modified Bresenham line-drawing algorithm for center-node mode (Choi et al., 2010).
     * @param map dem information.
     * @param pos actual position.
     * @param succ desired node to check line of sight.
     * @return true if there is line of sight from pos to succ. False otherwise.
     */
    public static boolean LineOfSightC(Map map, Node pos, Node succ)
    {
        int x0 = pos.getX();
        int y0 = pos.getY();
        int x1 = succ.getX();
        int y1 = succ.getY();
        int dx = x0 - x1;
        int dy = y0 - y1;
        int stepx;
        if(dx == 0) stepx = 0;
        else stepx = dx>0 ? 1 : -1;
        int stepy;
        if(dy == 0) stepy = 0;
        else stepy = dy>0 ? 1 : -1;
        dx = 2 * dx * stepx;
        dy = 2 * dy * stepy;
        int l, px, py, error;
        if(dx > dy)
        {
            l = (dy - dx) / 2;
            error = 0;
            px = x1;
            py = y1;
            while(px != x0)
            {
                if(error > l)
                {
                    px += stepx;
                    error -= dy;
                }
                else if(error < l)
                {
                    py += stepy;
                    error += dx;
                }
                else
                {
                    px += stepx;
                    py += stepy;
                    error += dx - dy;
                }
                if(map.get_tcost(px, py) > Map.MAX_COST)
                    return false;
            }
        }
        else
        {
            l = (dx - dy) / 2;
            error = 0;
            px = x1;
            py = y1;
            while(py != y0)
            {
                if(error > l)
                {
                    py += stepy;
                    error -= dx;
                }
                else if(error < l)
                {
                    px += stepx;
                    error += dy;
                }
                else
                {
                    px += stepx;
                    py += stepy;
                    error += dy - dx;
                }
                if(map.get_tcost(px, py) > Map.MAX_COST)
                return false;
            }
        }
        // They are visible
        return true;
    }
    
}